# Para-Phrase Generator Project Rules

## Code Organization

- **Module Structure**: The project follows a modular structure with clear separation of concerns:
  - `src/` contains the core application code
  - `src/assistants/` contains the OpenAI Assistants API integration
  - `src/agents/` contains agent implementations
  - `src/sdk_imports.py` centralizes all OpenAI SDK imports
  - `src/utils.py` contains utility functions
  - `src/config.py` manages configuration settings

- **Documentation**: All files must have a docstring at the top explaining their purpose, and all classes and functions must have docstrings.

- **Error Handling**: All external API calls must be wrapped in try-except blocks with appropriate error logging.

## Environment Configuration

- **Environment Variables**: All configuration should be managed through environment variables defined in `.env` file.
  - Required variables include: `OPENAI_API_KEY`, `TELEGRAM_BOT_TOKEN`
  - Optional variables include: `TWITTER_BEARER_TOKEN`, `LOG_LEVEL`, etc.

- **Configuration Management**: The `src/config.py` file manages all configuration settings and provides environment-specific defaults.

## API Integration Patterns

- **OpenAI Integration**: 
  - Use the Assistants API for thread-based conversations
  - Use GPT-4o for image analysis
  - Use built-in web search capability instead of custom implementation

- **Telegram Integration**:
  - Use the `fetch_telegram_file` function to retrieve files from Telegram
  - Store message history in memory with a maximum limit per chat

## Feature Implementation

- **Message Linking**: Always enabled to provide better context for users.

- **Image Analysis**: Uses GPT-4o for optimal results, with proper error handling for cases where the image cannot be retrieved.

- **Web Search**: Uses OpenAI's built-in web search capability.

- **Twitter Link Processing**: Uses the Twitter API with bearer token for optimal functionality, with fallback for cases where the token is not available.

## Testing and Deployment

- **Testing**: Test scripts are available in the `tests/` directory for key components.

- **Deployment**: Use the `run.py` script for easy deployment with proper error handling.

## Coding Style

- **Imports**: Group imports by standard library, third-party, and local modules.

- **Error Logging**: Use the logging module with appropriate log levels.

- **Type Hints**: Use type hints for function parameters and return values.

- **Comments**: Use clear and concise comments to explain complex logic.

## Memory Bank

- The `memory-bank/` directory contains documentation about the project:
  - `projectbrief.md`: Core requirements and goals
  - `productContext.md`: Why this project exists and how it should work
  - `activeContext.md`: Current work focus and recent changes
  - `systemPatterns.md`: System architecture and key technical decisions
  - `techContext.md`: Technologies used and technical constraints
  - `progress.md`: What works and what's left to build 